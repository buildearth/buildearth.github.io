[{"title":"hexo&typaro配合编写博客","path":"/2023-02-05/hexo-typaro-writing/","content":"本文内容是 picgo+配置typora的图片上传 配置免费的github图床 picgo对github图床的配置 我是如何利用typora编写博客的 以此来实现免费的图床，解决typora编写时照片在博客中展示的问题。 PicGo 下载安装下载地址： https://github.com/Molunerfinn/PicGo/releaseshttps://github.com/Molunerfinn/PicGo/releases window电脑下载： 安装： 双击下载的exe文件进行安装，我选择是安装到D:\\PicGo下 不论安装在哪个位置，要记住安装路径，后面配置要到 配置picgo支持多种图床，想要白嫖，就选择了github来作为免费图床，如果感觉速度不行可替换其他图床(其他图床可参考官方文档，鉴于网络环境，建议自行寻找可用的图床)。 配置前需要准备: 一个github的仓库，来存储照片。 生成一个 token 用于 PicGo 操作你的仓库 picgo配置github图床参数 配置截图参数解析 图床配置名 自定义配置的名字，自己随意编写，能代表当前配置即可 设定仓库名 仓库名的格式是用户名/仓库，用户名是你的github的用户名，仓库是你创建的图床仓库的名字 设定分支 根据个人爱好设置，我一般设置的是master 设定存储路径 不设置默认存储在仓库的根目录下 设置了blogs,照片会存储在仓库/blogs/下 token 是在github中生成的token 设定自定义域名 图片访问的速度解决 GitHub 图片访问过慢解决将自定义域名设置为 https://fastly.jsdelivr.net/gh/{用户名}/{仓库名}@{分支名}。 配置完github图床后，将其设置为默认图床 github仓库配置 1.新建一个空仓库 2.生成一个token 访问https://github.com/settings/tokens 生成token的一些必选项 拉倒最底下点击生成token，token只展示一次，将token保存在别处，不要泄露。 typora配置&测试 配置PicGo到Typora 点击验证图片上传选项如果返回成功说明已经配置好了 typora编写博客 hexo生成一篇文章 typora打开文章md文件进行编写 图片上传 将截图直接粘贴在typora中 右键点击图片选择上传图片即可 使用stellar主题中的样式时，直接写即可 发布博客 hexo cl &amp; hexo g &amp; hexo d","tags":["stellar食用"],"categories":["stellar食用"]},{"title":"修改git配置的submodule","path":"/2023-02-04/change-git-submodule/","content":"将原有的 git submodule 删除，并添加新的 git submodule 删除原有的gitsubmodule1.查看已有的子模块名字，用来替换后续命令中的&#123;MOD_NAME&#125;值。 输出themes/​ themes 就是子模块的名字，替换{MOD_NAME}的值 2.删除子模块 3.删除.gitmodules中记录的模块信息 4.修改提交到代码库 此外，可能还需要删除.git/modules/{MOD_NAME}的缓存，否则无法创建同名的module. 5.最后，记得将本地仓库修改推送到远程仓库 添加新的子模块","tags":["stellar食用","git"],"categories":["git"]},{"title":"Hello World","path":"/2023-02-04/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"测试文章","path":"/2023-01-11/blog/测试文章/","content":"这里是摘要 这里是正文部分，在主页看不到哦 Hexo 一共支持12种颜色，可以满足几乎所有的需求了。color 可设置 red、orange、yellow、green、cyan、blue、purple、light、dark、warning、error 几种取值。 图片代码块表格12let x = 123print(&quot;hello world&quot;) a b c a1 b1 c1 a2 b2 c2 如果宇宙中真有什么终极的逻辑，那就是我们终有一天会在舰桥上重逢，直到生命终结。XAOXUU 目前是一个 iOS 开发者，代表作品有：ProHUD、ValueX 等。在业余时间也开发了 Stellar 博客主题，更多的作品可以去项目主页查看，希望大家喜欢～文章项目留言GitHub","tags":["测试文章","杂项"],"categories":["测试"]},{"path":"/about/index.html","content":"关于哔哔GitHubGitLab友链留言 关于 简介动态游戏阅读如果宇宙中真有什么终极的逻辑，那就是我们终有一天会在舰桥上重逢，直到生命终结。 本站是@buildearth的个人站. 近期博客搭建日程 搭建属于自己的博客，打造个性化博客。 待添加功能动态时间轴友链搭建,可以参考: https://blog.pengfeima.cn/about增加 哔哔 的功能，效果参考: https://www.cayzlh.com/speak/教程: https://kkapi-doc.vercel.app/https://sianx.com/posts/d17b503e/每日诗词: https://www.jinrishici.com/doc/更换换Twikoo作为评论系统&amp;部署到vercel，https://kkapi-doc.vercel.app/博客部署到 vercel更换字体https://hermitlsr.top/2021-07-29/Stellar-%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/#%E6%9B%B4%E6%8D%A2-harmonyos-%E5%AD%97%E4%BD%93https://hermitlsr.top/2021-07-29/Stellar-%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/#%E6%9B%B4%E6%8D%A2-harmonyos-%E5%AD%97%E4%BD%93开始搭建属于自己的博客基于 https://xaoxuu.com/wiki/stellar/ 的教程开始搭建博客。瞅瞅 游戏 推荐指数 游玩时间 Red Alert 2 ★★★★ 2005-2012 World of Warcraft ★★★★☆ 2006-2020 Red Alert 3 ★★★★☆ 2013-2021 Minecraft ★★★★ 2013-2016 Bad Piggies ★★★★★ 2014-2017 Terraria ★★★★☆ 2014-2021 Don‘t Starve ★★★★☆ 2015-2021 Ori and the Blind Forest ★★★★★ 2018-2020 Human Fall Flat ★★★★★★ 2018-2021 计划阅读： 《重构》 《编写可读代码的艺术》 《代码整洁之道》 如何支持博主 本站没有任何推广和打赏链接，如果您觉得哪个作品不错，欢迎去对应的仓库点个赞，或者在对应的文章下面留言互动一下。"},{"path":"/bibi/index.html","content":"/* 页面初始化 */ div#page { background: none; border: 0; padding: 0; } [data-theme=dark] #twikoo .tk-content, #twikoo .tk-content { padding: 0; background: transparent; } .talk_item, .tk-expand, .tk-comments-container>.tk-comment, .tk-submit:nth-child(1){ background: var(--card-bg); border: 1px solid #e0e3ed; box-shadow: 0 5px 10px rgb(189 189 189 / 10%); transition: all .3s ease-in-out; border-radius: 12px; } .talk_item:hover, .tk-comments-container>.tk-comment:hover, .tk-submit:nth-child(1):hover { border-color: #49b1f5; } .tk-submit { padding: 20px 10px 0; } .tk-comments-container>.tk-comment { padding: 15px; } /* 页面初始化结束 */ #talk{ margin-top: 1rem; } #talk .loading { display: flex; align-items: center; justify-content: center; flex-direction: column; } #talk .loading img { width: 200px; } .talk_item { display: flex; flex-direction: column; padding: 20px; margin-bottom: 15px; } .avatar { margin: 0 !important; width: 60px; height: 60px; border-radius: 10px; } .talk_bottom, .talk_meta { display: flex; align-items: center; width: 100%; line-height: 1.5; } .talk_bottom{ justify-content: space-between; } .info { display: flex; flex-direction: column; margin-left: 10px; } span.talk_nick { color: #6dbdc3; font-size: 1.2rem; } svg.is-badge.icon { width: 15px; margin-left: 5px; padding-top: 3px; } span.talk_date { opacity: .6; } .talk_content { line-height: 1.5; margin-top: 10px; } .zone_imgbox { display: flex; flex-wrap: wrap; --w: calc(25% - 8px); gap: 10px; margin-top: 5px; } .zone_imgbox a { display: block; border-radius: 12px; width: var(--w); aspect-ratio: 1/1; position: relative; } .zone_imgbox img { width: 100%; height: 100%; margin: 0 !important; object-fit: cover; } /* 底部 */ .talk_bottom { opacity: .9; } .talk_bottom .icon { color: var(--font-color); float: right; transition: all .3s; } .talk_bottom .icon:hover { color: #49b1f5; } span.talk_tag{ font-size: 14px; } .talk_content>a { margin: 0 3px; color: #ff7d73 !important; } .talk_content>a:hover{ text-decoration: none !important; color: #ff5143 !important } /* 提醒 */ .limit { transition: all .3s ease-in-out; color: rgba(76, 73, 72, 0.6); } [data-theme=dark] .limit { color: rgba(255, 255, 255, 0.5); } .limit { display: none; text-align: center; margin-top: 20px; color: var(--font-color); } @media screen and (max-width: 900px) { .zone_imgbox { --w: calc(33% - 5px); } #talk{ margin: 10px 3px 0 } #post-comment{ margin: 0 3px } } @media screen and (max-width: 768px) { .zone_imgbox { gap: 6px; } .zone_imgbox { --w: calc(50% - 3px); } span.talk_date { font-size: 14px; } } 动态 个人哔哔 我的生活、吐槽、闲话... 生活相册 - 只展示最近30条说说 - pageTalk(); // 页面说说 function pageTalk() { fetch('http://120.78.141.29/api/memo?creatorId=1&tag=说说&limit=30').then(res => res.json()).then(data => { // 注意修改域名 let items = [], html = '', icon = ''; data.data.forEach(item => { items.push(Format(item)) }); if (items.length == 30) document.querySelector('.limit').style.display = 'block'; items.forEach(item => { html += `BuildEarth${icon}${item.date}${item.content}# ${item.tag}` // 注意修改头像链接和名称 }) document.getElementById('talk').innerHTML = html }) } // 页面评论 function goComment(e) { var n = document.querySelector(\".el-textarea__inner\") n.value = `> ${e} `; n.focus(); btf.snackbarShow(\"无需删除空行，直接输入评论即可\", !1, 2e3); } // 页面内容格式化 function Format(item) { let date = getTime(new Date(item.createdTs * 1000).toString()), content = item.content, tag = item.content.match(/\\{(.*?)\\}/g), imgls = content.match(/!\\[.*\\]\\(.*?\\)/g), // 2023-02-06更新 text = '' text = content.replace(/#(.*?)\\s/g, '').replace(/\\!\\[(.*?)\\]\\((.*?)\\)/g, '').replace(/\\{(.*?)\\}/g, '') content = text.replace(/\\[(.*?)\\]\\((.*?)\\)/g, `@$1`); if (imgls) { content += `` imgls.map(item => { return item.replace(/!\\[.*\\]\\((.*?)\\)/, '$1') }).forEach(e => content += `` // 2023-02-06更新 ) content += '' } return { content: content, tag: tag ? tag[0].replace(/\\{(.*?)\\}/,'$1') : '无标签', date: date, text: text.replace(/\\[(.*?)\\]\\((.*?)\\)/g, '[链接]' + `${imgls?'[图片]':''}`) } } // 页面时间格式化 function getTime(time) { let d = new Date(time), ls = [d.getFullYear(), d.getMonth() + 1, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds()]; for (let i = 0; i < ls.length; i++) { ls[i] = ls[i]"},{"path":"/css/memos.css","content":"body { background-color: #f7f9fe; overflow: overlay!important } .page-top-card { background-size: cover; background-position: center; height: 20rem; padding: 10px 2.7rem; border-radius: 20px; color: #fff; position: relative } span.content-item-title { font-size: 2.3em; font-weight: 700; line-height: 1.2 } .content-bottom { display: flex; justify-content: space-between; align-items: center; position: absolute; width: calc(100% - 5.4rem); bottom: 1rem }"},{"path":"/friends/index.html","content":"关于哔哔GitHubGitLab友链留言 来自 GitHub 的朋友以下友链通过 GitHub Issue 提交： 如何自助添加友链？先友后链，在我们有一定了解了之后才可以交换友链，除此之外，您的网站还应满足以下条件： 合法的、非营利性、无商业广告 有实质性原创内容的 HTTPS 站点 第一步：新建 Issue新建 GitHub Issue 按照模板格式填写并提交。为了提高图片加载速度，建议优化头像：打开 压缩图 上传自己的头像，将图片尺寸调整到 96px 后下载。将压缩后的图片上传到 去不图床 并使用此图片链接作为头像。第二步：添加友链并等待管理员审核请添加本站到您的友链中，如果您也使用 issue 作为友链源，只需要告知您的友链源仓库即可。1234title: buildearthavatar: https://fastly.jsdelivr.net/gh/cdn-x/xaoxuu/avatar/rect-256@2x.pngurl: https://besaka.topscreenshot: https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg待管理员审核通过，添加了 active 标签后，回来刷新即可生效。 如果您需要更新自己的友链，请直接修改 issue 内容，大约 3 分钟内生效，无需等待博客更新。如果无法修改，可以重新创建一个。"},{"title":"便笺","path":"/notes/index.html","content":"整理的一些思路和网址 TOC日常问题解决方案Mac 相关问题移动端开发笔记iOS 相关问题Flutter 相关问题前端学习笔记Node.js 相关问题服务器相关问题在线工具Json在线解析工具 site的使用 镜像 清华大学开源软件镜像站清华大学开源软件镜像站阿里云官方镜像站https://developer.aliyun.com/mirror/ 行业大佬 OneV's Den上善若水，人淡如菊曾静的博客但行好事，莫问前程唐巧的博客记录下自己学习的点滴步步走前端大佬Acozycotage BlogAcozycotage Blog韩小韩API接口站一些接口，用于hexo博客样式 site22 从友人逛来的网站书籍类 搬书匠书籍搜索下载艾思科蓝科研领域连接者OSCHINA科研领域连接者 影视类 不求人导航影视资源导航哔嘀影视影视资源导航NO视频免费外剧YYDS电影电影下载龙猫导航导航 在线工具 thum.io快速生成网站截图壁纸在线壁纸网站 技术社区 统计之都统计之都中文网站github开源项目搜开源"},{"title":"Flutter 相关问题","path":"/notes/flutter/index.html","content":"运行时弹出「无法打开“iproxy”，因为无法验证开发者。」弹窗，手动添加信任： 1sudo xattr -r -d com.apple.quarantine futter的SDK目录/bin/cache/artifacts/usbmuxd/iproxy 清除缓存，重新 build： 123rm -rf buildflutter cleanflutter build ios --debug"},{"path":"/notes/ios/index.html","content":"最新版 CocoaPods 的安装流程 （首次安装）移除现有Ruby默认源 （首次安装）使用新的源 （首次安装）验证新源是否替换成功 （可选）更新 gem 安装 CocoaPods Podfile 文件中的一些写法CocoaPods&nbsp;Guides&nbsp;-&nbsp;The&nbsp;Podfilehttps://guides.cocoapods.org/using/the-podfile.html 1234# 设置镜像源source &#x27;https://cdn.cocoapods.org/&#x27;# 忽略警告inhibit_all_warnings! 如何发布开源库到 CocoaPods说实在话，类似的教程网上很多，基本可以满足大多数人零基础发布 CocoaPods，但是其中可能会遇到一些问题，只有亲自尝试过才知道。 准备工作1. clone 远程仓库到本地1git clone 你的仓库链接 2. 注册 trunk注册的命令 1pod trunk register 你的邮箱 你的用户名 记得去邮箱里验证，然后可以输入以下命令查看个人信息 1pod trunk me 步骤1. 创建 .podspec1pod spec create AXKit 2. 修改 .podspec 并验证有很多类似的教程，可以参考。 一个小技巧：你可以去GItHub搜索一些热门的第三方库，然后点击查看这些大牛的 .podspec 是怎么写的。传送门：YYKit的podspec、ReactiveObjC的podspec、BlocksKit的podspec 最容易出错的地方就是资源路径 1s.source_files = &quot;AXKit/**/*.&#123;h,m&#125;&quot; 常见写法 123&quot;Directory1/*&quot; 表示匹配所有文件&quot;Directory1/Directory2/*.&#123;h,m&#125;&quot; 表示匹配所有以.h和.m结尾的文件&quot;Directory1/**/*.h&quot; 表示匹配所有子目录 s.source 常见写法 1234# 推荐写法：与版本号绑定s.source = &#123; :git =&gt; &quot;https://github.com/TeaseTian/HTQRCode.git&quot;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;# 与commit id 绑定s.source = &#123; :git =&gt; &quot;https://github.com/TeaseTian/HTQRCode.git&quot;, :commit =&gt; &quot;68defea&quot; &#125; tag &#x3D;&gt; s.version 表示将这个 Pod 版本与 Git 仓库中相同版本的 comit 绑定 验证 1pod spec lint AXKit.podspec 3. 上传到远程仓库修改 .podspec 时指定的版本号，如 0.0.1。那么远程仓库中必须始终存在这个版本的 branch 或 tag 才能够下载。建议使用 tag。s.source 中的 tag 需要与远程仓库中的 tag 对应起来。 12s.version = &quot;0.0.1&quot;s.source = &#123; :git =&gt; &quot;https://github.com/xaoxuu/AXKit.git&quot;, :tag =&gt; &quot;v#&#123;s.version&#125;&quot; &#125; 这里指向的是 &quot;v0.0.1&quot; 这个分支，因为分支我们用完之后习惯把它删掉，所以这里也可以指向 tag，也就是说打一个 &quot;v0.0.1&quot; 的 tag 并推送到远程就可以了。 12git tag v0.0.1git push --tags 这样做的好处就是删掉当前分支不影响 CocoaPods 中指向的仓库源码。 4. 发布到 CocoaPods1pod trunk push AXKit.podspec n. 删除一个 podspec 版本删除的命令是： 1pod trunk delete 项目名 版本号 官方建议使用 deprecate 来弃用 1pod trunk deprecate 项目名 这两种方法执行完有很大几率会出现一串很长很长的错误，不要着急，这实际上这是一个 html。把它保存到一个 html 文件中，打开，是个404错误页，原因众所周知。 删除之后立即搜索还是能搜到的，因为有一定的延迟，可能要半个小时才能更新。 pod trunk 命令在终端输入 1pod trunk --help 可以查看帮助 使用脚本没必要每次都重复每个步骤，如果你已经发布过一个，可以省去注册的步骤，直接把已经发不过的 podspec 复制一份，改一下仓库模块名，验证通过就可以发布了。 我写了一个便于发布更新的脚本，把脚本放在与 podspec 同级目录下，当你更新了项目之后，如果需要更新到 cocoapods，可以执行此脚本。流程是： 1输入版本号 -&gt; commit、push tag -&gt; pod spec lint -&gt; 询问是否发布(y/n) -&gt; 发布(y) 脚本的项目https://github.com/xaoxuu/podspec.sh 应用上传失败原因可能有很多，有关于 Transporter 的问题可以尝试删除缓存： 删除缓存 重新下载缓存 这个缓存有 60MB （2020年7月份下载实测） 素材规格iPhone 各代屏幕尺寸与分辨率经典屏幕设备 iPhone 对角线 缩放 逻辑分辨率 物理分辨率 ppi 1、3G、3GS 3.5 @2x 320x480 320x480 163 4、4s 3.5 @2x 320x480 640x960 326 5、5s、SE 4 @2x 320x568 640x1136 326 6、6s、7、8、SE2、SE3 4.7 @2x 375x667 750x1334 326 6 Plus、6s Plus、7 Plus、8 Plus 5.5 @3x 414x736 1242x2208 401 全面屏设备 iPhone 对角线 缩放 逻辑分辨率 物理分辨率 ppi X、XS、11 Pro 5.8 @3x 375x812 1125x2436 458 XR、11 6.1 @2x 414x896 828x1792 326 XS Max、11 Pro Max 6.5 @3x 414x896 1242x2688 458 12 mini、13 mini 5.4 @3x 375x812 1080x2340 476 12、13 6.1 @3x 390x844 1170x2532 460 12 Pro、13 Pro 6.1 @3x 390x844 1170x2532 460 12 Pro Max、13 Pro Max 6.7 @3x 428x926 1284x2778 458 iPad 各代屏幕尺寸与分辨率经典屏幕设备 iPad 对角线 缩放 逻辑分辨率 物理分辨率 ppi 1、2 9.7 @1x 768x1024 768x1024 132 mini 1 7.9 @1x 768x1024 768x1024 163 mini 2&#x2F;3&#x2F;4 7.9 @2x 768x1024 1536x2048 326 Air 1&#x2F;2 9.7 @2x 768x1024 1536x2048 264 Pro (9.7) 9.7 @2x 768x1024 1536x2048 264 iPad (10.2) 10.2 @2x 810x1080 1620x2160 264 Pro (10.5) 10.5 @2x 834x1112 1668x2224 264 全面屏设备 iPad 对角线 缩放 逻辑分辨率 物理分辨率 ppi mini 6 7.9 @2x 744x1133 1488x2266 326 Air 5 10.9 @2x 820x1180 1640x2360 264 Pro (11’ 2018) 11 @2x 834x1194 1668x2388 264 Pro (12.9’ 2018) 11 @2x 1024x1366 2048x2732 264 Logo &amp; 启动图UI 只需要提供一张 1024*1024 尺寸的图即可，开发使用IconKit工具可以直接生成开发需要的各种尺寸的图片及其 json 配置文件，直接拖进 Xcode 工程中就可以使用了。使用传统方式不同尺寸一张一张的切图不仅浪费 UI 的时间，开发也需要一张图一张图往对应位置拖，双方都很麻烦。 如果使用 LaunchImage 方式，需要切各个尺寸的图片，参考iPhone 各代屏幕尺寸与分辨率表，如果需要兼容 iPhone 4、4s 机型，则需要提供一共7种尺寸的图片，如果最低兼容 iPhone5 的话，就只需要提供6种尺寸的图片。 注意：iOS 并不需要 1920*1080 这种尺寸的图片。 icon 素材iOS 端的切图需要同时提供 @2x 和 @3x 两种尺寸的图片，例如某个名为 “imagename” 的图片需要提供两个文件分别命名为： 12imagename@2x.pngimagename@3x.png 素材名（imagename）命名可以根据公司或团队规范而异，但是两种尺寸的文件的素材名部分要保持一致，唯一的不同就是 @2x 和 @3x。"},{"path":"/notes/json/index.html","content":"Json 在线解析工具"},{"title":"Mac 相关问题","path":"/notes/mac/index.html","content":"提示 “安装包已损坏” 怎么办？ 清理 Mac 的 DNS 缓存123sudo killall -HUP mDNSRespondersudo killall mDNSResponderHelpersudo dscacheutil -flushcache TNT 团队的应用无法使用怎么办？TNT 的证书签署的软件在 2019年7月12日 后都不能运行了，临时的解决办法，就是自己签名。1. 安装 Xcode安装 Xcode，你可以在 App Store 中下载安装，并且至少运行一次。2. 安装 Command Line Tools 工具打开终端工具输入如下命令：弹出后选择继续安装。3. 为应用签名打开终端工具输入并执行如下命令：1codesign --force --deep --sign - /Applications/name.app注意后面的文件路径，你可以打开访达找到应用程序，找到要签名的软件，直接拖入「终端」界面，即可自动生成路径。 显示隐藏文件显示隐藏 外置磁盘路径1/volume/磁盘路径/~~~例如一个名称为 “Files” 的磁盘里的文件夹 “Projects” 路径是:1/Volumes/Files/Projects/ 使用终端将 json 文件转为 plist 文件1plutil -convert xml1 data.json -o data.plist其中 data.json、data.plist 分别对应转换前后的文件路径。 sudo 依然没有权限的解决办法查询 SIP 状态关闭 SIP开启 SIP如果输出以下信息，说明 SIP 开启，需要暂时将 SIP 关闭。1System Integrity Protection status: enabled.重启 Mac，按住 command + R 直到出现开机 logo，此时会进入 Recovery 模式，选择「实用工具」-&gt;「Terminal」并输入以下命令：然后重新启动电脑即可关闭 SIP。重启 Mac，按住 command + R 直到出现开机 logo，此时会进入 Recovery 模式，选择「实用工具」-&gt;「Terminal」并输入以下命令：然后重新启动电脑即可开启 SIP。 搭载 Intel 芯片的 Mac 启动组合键Command (⌘)-R：从内建的 macOS 恢复系统启动。或者，您也可以使用 Option-Command-R 或 Shift-Option-Command-R 以通过互联网从 macOS 恢复功能启动。macOS 恢复功能可以安装不同版本的 macOS，具体取决于您在电脑启动时使用的组合键。如果您的 Mac 使用了固件密码，系统将提示您输入这个密码。Option (⌥) 或 Alt：启动进入“启动管理器”，您可以从中选取其他可用的启动磁盘或宗卷。如果您的 Mac 使用了固件密码，系统将提示您输入这个密码。Option-Command-P-R：重置 NVRAM 或 PRAM。如果您的 Mac 使用了固件密码，电脑会忽略这个组合键或从 macOS 恢复功能启动。Shift (⇧) ：以安全模式启动。如果使用了固件密码，这个组合键将被停用。D：启动进入“Apple 诊断”实用工具。也可以使用 Option-D 通过互联网启动进入这个实用工具。如果使用了固件密码，这个组合键将被停用。N：从 NetBoot 服务器启动，前提是您的 Mac 支持网络启动宗卷。要使用服务器上默认的引导映像，请按住 Option-N。如果使用了固件密码，这个组合键将被停用。Command-S：以单用户模式启动。如果运行的是 macOS Mojave 或更高版本，或者使用了固件密码，这个组合键会被停用。T：以目标磁盘模式启动。如果使用了固件密码，这个组合键将被停用。Command-V：以详细模式启动。如果使用了固件密码，这个组合键将被停用。推出键 (⏏)、F12、鼠标按钮或触控板按钮：推出可移动介质，例如光盘。如果使用了固件密码，这个组合键将被停用。"},{"title":"Node.js 相关问题","path":"/notes/nodejs/index.html","content":"查看当前的源： 官方源： 淘宝源："},{"title":"服务器相关问题","path":"/notes/server/index.html","content":"GitHub Action + Hexo 部署到服务器在本地电脑生成 ssh key 创建 git 用户 设置 ssh把本机的 id_isa.pub 内容复制到这里： 1/home/git/.ssh/authorized_keys 如果通过 ssh 登录仍需要密码的解决方法找到并修改 /etc/ssh/sshd_config 文件： 12345678910111213141516#禁用root账户登录，如果是用root用户登录请开启PermitRootLogin yes# 是否让 sshd 去检查用户家目录或相关档案的权限数据，# 这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。# 例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入StrictModes no# 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。# 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内RSAAuthentication yesPubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keys# 有了证书登录了，就禁用密码登录。PasswordAuthentication no 然后重启 sshd 服务 网站路径创建网站，以 /www/wwwroot/xaoxuu.github.io 为例，/www/wwwroot/xaoxuu.github.io 的权限要改成 777 并且所有者为 www 才可以访问。 GitHub Action1234567891011121314151617181920212223242526272829303132333435363738394041424344name: auto deploy # workflow nameon: [push] # 触发事件jobs: build: # job1 id runs-on: ubuntu-latest # 运行环境为最新版 Ubuntu name: auto deploy steps: - name: Checkout # step1 获取源码 uses: actions/checkout@v1 # 使用 actions/checkout@v1 with: # 条件 submodules: true # Checkout private submodules(themes or something else). 当有子模块时切换分支？ - name: Setup Node.js 10.x uses: actions/setup-node@master with: node-version: &quot;10.x&quot; - name: Generate Public Files run: | npm i npm install hexo-cli -g hexo clean &amp;&amp; hexo generate # Deploy to GitHub Pages - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: deploy_key: $&#123;&#123; secrets.DEPLOY_KEY &#125;&#125; external_repository: xaoxuu/xaoxuu.github.io publish_branch: gh-pages publish_dir: ./public commit_message: $&#123;&#123; github.event.head_commit.message &#125;&#125; user_name: &#x27;github-actions[bot]&#x27; user_email: &#x27;github-actions[bot]@users.noreply.github.com&#x27; # Deploy to Server - name: Deploy to Server uses: easingthemes/ssh-deploy@v2 env: SSH_PRIVATE_KEY: $&#123;&#123; secrets.SERVER_SSH_KEY &#125;&#125; ARGS: &quot;-rltgoDzvO --delete&quot; SOURCE: public/ REMOTE_HOST: $&#123;&#123; secrets.REMOTE_HOST &#125;&#125; REMOTE_USER: $&#123;&#123; secrets.REMOTE_USER &#125;&#125; TARGET: $&#123;&#123; secrets.TARGET &#125;&#125; 在 Settings -&gt; Secrets 中填写对应的值： 1234SERVER_SSH_KEY: 第一步本机生成的 id_isa 文件内容REMOTE_HOST: 服务器地址REMOTE_USER: 用户名，例如 &quot;git&quot;TARGET: 生成的文件路径，例如 &quot;/www/wwwroot/xaoxuu.github.io/&quot; 设置 webhookpost-receive123#!/bin/bashWEBROOT=/www/wwwroot/xaoxuu.github.iogit --work-tree=$WEBROOT checkout -f master 把上述的 post-receive 文件放在这里： 1/home/git/xxx.git/hooks/post-receive /www/wwwroot/xaoxuu.github.io 的权限要改成 777 才行 Hexo&nbsp;从&nbsp;GitHub&nbsp;到阿里云https://zhuanlan.zhihu.com/p/58654392 GitLabGitLabhttp://42.192.89.158:8099 把上述的 post-receive 文件放在这里： 1/var/opt/gitlab/git-data/repositories/root/xxx.git/custom_hooks/post-receive GitLab 的 ssh 能记住密钥， hook 也正常，缺点就是每个月多花10块钱满足 GitLab 最低配置要求。 404打开 nginx 配置文件，拉到最后，看到： 1include /www/server/panel/vhost/nginx/*.conf; 然后根据这个路径找到自定义的配置文件： 1/www/server/panel/vhost/nginx/xaoxuu.com.conf 在其中添加如下代码就可以了： 12345678910server&#123; ... fastcgi_intercept_errors on; error_page 404 /404.html; location = /404.html &#123; root /www/wwwroot/xaoxuu.github.io; &#125; ...&#125;"},{"title":"认识 Git","path":"/wiki/git/index.html","content":"什么是 Git ？Git 是目前世界上最先进的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 Git 与 SVN 区别点 Git 是分布式的，SVN 不是。这是 Git 和其它非分布式的版本控制系统如 SVN，CVS 等最核心的区别。 Git 把内容按元数据方式存储，而 SVN 是按文件。 Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。 Git 没有一个全局的版本号，而 SVN 有。目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。 Git 的内容完整性要优于 SVN。Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。 图片来源于 RUNOOB Git 工作区、暂存区和版本库 工作区：就是你在电脑里能看到的目录。 暂存区：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）。 版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。"},{"title":"requests 学习","path":"/wiki/requests/index.html","content":"什么是 requests ？Git 是目前世界上最先进的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 Git 与 SVN 区别点 Git 是分布式的，SVN 不是。这是 Git 和其它非分布式的版本控制系统如 SVN，CVS 等最核心的区别。 Git 把内容按元数据方式存储，而 SVN 是按文件。 Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。 Git 没有一个全局的版本号，而 SVN 有。目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。 Git 的内容完整性要优于 SVN。Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。 图片来源于 RUNOOB Git 工作区、暂存区和版本库 工作区：就是你在电脑里能看到的目录。 暂存区：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）。 版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。"},{"title":"快速开始您的博客之旅","path":"/wiki/stellar/index.html","content":"Stellar 是一个内置 wiki 系统的 hexo 主题，拥有简约而精美的视觉设计和丰富又灵活的标签插件，帮助您简单从容地应对各种表达需求，十分推荐内容创作者使用 Stellar 开始您全新的博客之旅。 了解 Stellar 的设计理念“真正的简约远不止删繁就简，而是在纷繁中建立秩序。”人的注意力是有限的，要提高有效信息的醒目程度，就必须降低不重要信息醒目程度，删除所有无效信息。降低视觉密度增加留白，增加间距。减少颜色丰富度，大面积出现的是中性色，彩色必须有其特殊意义，意义相同的元素使用同一种颜色。提高有效信息优先级文章标题永远是最大的，对比度最高的不可交互的不重要的小标题（如侧边栏某个插件的标题）降低对比度与文章相关的不重要的小标题，使用小号字体删掉无效信息文章标签、字数、阅读量、评论数网站访问量、字数、搭建时间全局播放器（除了特殊文章） 开始前的准备工作尽管我们致力于降低使用门槛，但是自建独立博客仍然需要一定的相关知识，markdown 常用语法是必须要掌握的，除此之外，您还需要知道 yaml 文件格式、简单的 git 知识，最最重要的是，遇到问题知道该如何高效地寻找答案： 翻阅和搜索文档 搜索 issues 中是否已经有解决办法 如果没有，新建 issue 并按照要求进行操作，详尽地描述您遇到的问题 如果您没有使用过 Hexo 也不要着急，可以先通读一遍 Hexo 中文文档。此外，如果您从旧版本更新或着其它主题迁移，请确保环境版本不要太低，否则会产生兼容性问题： 建议的版本1234Hexo: 5.4.0 ~ 6.2.0hexo-cli: 4.3.0 ~ latestnode.js: 14.17.3 ～ 16.15.0 # 建议选择 LTS 版本，过高的版本 hexo 还没有进行兼容。npm: 6.14.13 ~ 8.5.5 安装与更新 示例博客 小提示如果您也使用了 Stellar 并希望显示在这里，可以在hexo-theme-stellar-examples中提交 issue 告知您的站点信息，在您提交后的大约 3 分钟内生效。 开源许可协议项目中的许可声明文件应包含在所有副本中 本主题是由@xaoxuu设计和开发，使用MIT License开源许可协议进行授权，拷贝、分享或基于此进行创作时请遵守协议内容： 123456789101112131415161718192021MIT LicenseCopyright (c) 2021 xaoxuuPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE. 鸣谢感谢以下开发者贡献代码： 感谢点赞的用户1-100101-200201-300 Todo搜索（欢迎 PR） 横向滚动的 gallery 标签 更多评论插件（请提 issue 告知） 公式（欢迎 PR）"},{"title":"认识 爬虫","path":"/wiki/爬虫/index.html","content":"什么是 Git ？Git 是目前世界上最先进的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 Git 与 SVN 区别点 Git 是分布式的，SVN 不是。这是 Git 和其它非分布式的版本控制系统如 SVN，CVS 等最核心的区别。 Git 把内容按元数据方式存储，而 SVN 是按文件。 Git 分支和 SVN 的分支不同：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。 Git 没有一个全局的版本号，而 SVN 有。目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。 Git 的内容完整性要优于 SVN。Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。 图片来源于 RUNOOB Git 工作区、暂存区和版本库 工作区：就是你在电脑里能看到的目录。 暂存区：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index）。 版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。"},{"title":"基本操作入门","path":"/wiki/git/usage/index.html","content":"基本操作流程 在对代码进行了一些修改之后，使用：git add --all 将本地所有新增文件和修改内容添加到暂存区。 使用：git commit -m 备注 将代码提交到本地版本库。（备注内容没有空格的话不需要加引号） 使用：git pull origin 从服务器拉取代码，更新本地版本库。 使用：git push origin 将本地版本库推送到服务器。 克隆与配置克隆版本库123git clone https://github.com/xaoxuu/AXKit.git# 或者git clone https://github.com/xaoxuu/AXKit.git AXKit 配置版本库要忽略某些文件的改动需要配置 .gitignore 文件： 123456789101112# 这是macOS文件夹属性的隐藏文件，不需要同步到git.DS_Store# 某个文件夹不想要同步到git/public/node_modules# 某个文件不想要同步到gittest.txt# 通配符._* 基本操作指令创建与切换分支创建并切换 branch1git checkout -b 分支名 仅仅切换 branch1git checkout 分支名 创建 tag1git tag 标签名 创建 tag 并备注1git tag -a 标签名 -m 备注信息 创建 PGP tag 并备注1git tag -s 标签名 -m 备注信息 查看分支和标签查看本地 tag1git tag 查看某个本地 tag 详情1git show 标签名 查看本地 branch list1git branch 分支名 查看远程 branch list1git branch -r 分支名 查看所有 branch list1git branch -a 分支名 删除分支和标签删除本地 branch / tag1git branch -d 分支名或标签名 删除所有未推送的本地 branch1git fetch -p 仅仅删除某个远程 branch / tag123git push origin :分支名或标签名# 或者git push origin --delete 分支名或标签名 推送分支和标签推送某个 branch / tag1git push origin 分支名或标签名 推送所有 branch1git push --all origin 推送所有 tag1git push --tags 重命名分支重命名本地分支： 1git branch -m 旧分支名 新分支名 重命名远程分支： 删除远程分支 重命名本地分支 推送本地分支 拉取、合并分支拉取某个远程标签1git fetch origin tag 远程标签名 合并某本地分支到当前分支1git merge 分支名 合并某远程分支到当前分支1git pull origin 远程分支名 代码冲突我一般使用 Tower 客户端操作，pull 之后有冲突的文件会列出来。建议使用一个比较好的编辑器如 Atom ，有冲突的部分会用两种颜色高亮。 未完待续 代码回退如果冲突文件没有妥善解决就提交到版本库导致严重后果，这是需要查看某个历史时刻的代码，使用： 12git log# 查看提交记录 然后 copy 某个 commit id 进行回退，回退的类型有两种： soft这是默认的回退方式，版本库的 HEAD 回滚到某个 commit 但本地代码不变，处于未 commit 的状态。 123git reset [commit id]# 或者git reset --soft [commit id] hardHEAD 和本地代码都回到某个 commit，后面的更改将会被丢弃。（如同时光穿梭） 1git reset --hard [commit id] 版本迭代查看本地所有标签 1git tag 把当前 HEAD 打个标签（名为：1.0） 123git tag 1.0# 也可以添加备注信息，如同commitgit tag 1.0 -m &#x27;message&#x27; 切换到某个标签（1.0） 1git checkout 1.0 把标签 push 到远程 push指定的tag1git push origin 1.0 push所有未push的tag1git push --tags 删除标签（1.0） 12345678# 删除本地taggit tag -d 1.0# 删除远程tag# 方法一：将空白tag覆盖到远程taggit push origin :1.0# 方法二：执行删除命令git push origin --delete 1.0 客户端操作Stash save：将当前未 commit 的代码保存到 stash，并且回到上次 commit 的状态。 apply：应用某个 stash 的代码。 Git-Flow自动化管理功能，例如： 准备开发新版本的时候：点击 Start Release，客户端会自动新建一个 release 分支。 准备增加一个新特性的时候：点击 Start Feature，客户端会新建一个 feature 分支。 需要修复 bug 的时候：点击 Start Hotfix，客户端会新建一个 fix 分支。 当修复完 bug，点击 Finish Hotfix 的时候，客户端会自动把 fix 分支合并到创建它的分支，并且创建一个 tag。 当一个新特性开发完成，点击 Finish Feature 的时候，客户端会自动把 feature 分支合并到创建它的分支，并且创建一个 tag。 当一个新版本开发完成，点击 Finish Release 的时候，客户端会自动把 release 分支合并到创建它的分支，并且创建一个 tag。"},{"title":"requests 用法","path":"/wiki/requests/requests_usage/index.html","content":"requests 的参数 ？requests的参数：。。。"}]